// public function ensureIsNotRateLimited(): void
// {
//     $maxAttempts = env('LOGIN_MAX_ATTEMPTS_BEFORE_BLOCK_USER', 5);
//     if (! RateLimiter::tooManyAttempts($this->throttleKey(), $maxAttempts)) {
//         return;
//     }

//     event(new Lockout($this));

//     $seconds = RateLimiter::availableIn($this->throttleKey());

//     throw ValidationException::withMessages([
//         'email' => trans('auth.throttle_warning', [
//             'seconds' => $seconds,
//             'minutes' => ceil($seconds / 60),
//         ]),
//     ]);
// }

public function authenticate(): void
{   
    $this->validationValuesLogin();
    $this->userExists()->update(['attempts' => RateLimiter::attempts($this->throttleKey())]);
    $this->ensureIsNotRateLimitedBlock();
    $this->ensureIsNotRateLimitedBeforeBlock();

    if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
        $this->addHitRateLimiter();
        throw ValidationException::withMessages([
            'email' => __('auth.failed'),
        ]);
    }

    RateLimiter::clear($this->throttleKey());
}

/**
 * Ensure the login request is not rate limited.
 *
 * @throws \Illuminate\Validation\ValidationException
 */
public function ensureIsNotRateLimitedBeforeBlock(): void
{
    $maxAttempts = env('LOGIN_MAX_ATTEMPTS_BEFORE_BLOCK_USER', 3);
    if (! RateLimiter::tooManyAttempts($this->throttleKey(),3)) {
        return;
    }

    event(new Lockout($this));

    $seconds = RateLimiter::availableIn($this->throttleKey());

    throw ValidationException::withMessages([
        'email' => trans('auth.throttle_warning', [
            'seconds' => $seconds,
            'minutes' => ceil($seconds / 60),
        ]),
    ]);
}
public function ensureIsNotRateLimitedBlock(): void
{
    $maxAttempts = env('LOGIN_MAX_ATTEMPTS', 5);
    if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
        return;
    }

    event(new Lockout($this));
    if($user = $this->userExists()){
        $user->update([
            'isBlocked' => true
        ]);
    }
    
    throw ValidationException::withMessages([
        'email' => trans('auth.throttle_block')
    ]);
}
public function addHitRateLimiter(){
    RateLimiter::hit($this->throttleKey());        
}
/**
 * Get the rate limiting throttle key for the request.
 */
public function throttleKey(): string
{
    return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
}